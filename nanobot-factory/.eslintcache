[{"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\index.js":"1","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\App.js":"2","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\home section\\index.js":"3","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\data.js":"4","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\smoothscroll.js":"5","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\upgrade section\\index.js":"6","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\stats section\\index.js":"7","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\formatnumbers.js":"8"},{"size":230,"mtime":1611549982384,"results":"9","hashOfConfig":"10"},{"size":115,"mtime":1611470197600,"results":"11","hashOfConfig":"10"},{"size":1347,"mtime":1611720483041,"results":"12","hashOfConfig":"10"},{"size":766,"mtime":1611797972776,"results":"13","hashOfConfig":"10"},{"size":868,"mtime":1611470012254,"results":"14","hashOfConfig":"10"},{"size":5809,"mtime":1611799930729,"results":"15","hashOfConfig":"10"},{"size":2624,"mtime":1611711984124,"results":"16","hashOfConfig":"10"},{"size":115,"mtime":1611711726223,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"w98xgd",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\index.js",[],["38","39"],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\App.js",[],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\home section\\index.js",["40","41"],"import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { data } from \"../other/data\";\r\nimport { formatNumbers } from \"../other/formatnumbers\";\r\nimport { smoothScroll } from \"../other/smoothscroll\";\r\nimport \"./clicker.css\";\r\nimport img from \"../../assets/click-icon-1.png\";\r\nimport UpgradeSection from \"../upgrade section\";\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <>\r\n      <Clicker />\r\n    </>\r\n  );\r\n};\r\n\r\nconst Clicker = () => {\r\n  const [Amount, setAmount] = useState(0);\r\n  const handleClick = () => {\r\n    data.total_clicks += 1;\r\n    data.current_amount = Amount + data.manual_value;\r\n    setAmount(data.current_amount);\r\n  };\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"clicker-container\"\r\n        id=\"clicker\"\r\n        onWheel={(e) => smoothScroll(\"clicker\", e)}\r\n      >\r\n        <Count amount={Amount} />\r\n        <button onClick={() => handleClick()}>\r\n          <img className=\"click-icon\" src={img} />\r\n        </button>\r\n      </div>\r\n      <UpgradeSection updateAmount={() => setAmount(data.current_amount)} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst Count = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"amount-container\">\r\n        <h1 className=\"amount\">{formatNumbers(Math.floor(props.amount))}</h1>\r\n        <h1>Nanobots</h1>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\data.js",[],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\smoothscroll.js",["42","43","44"],"export const smoothScroll = (section, e) => {\r\n  const section_1 = document.getElementById(\"clicker\");\r\n  const section_2 = document.getElementById(\"upgrades\");\r\n  const section_3 = document.getElementById(\"status\");\r\n  if (section == \"clicker\") {\r\n    if (e.deltaY > 0) {\r\n      section_2.scrollIntoView({ behavior: \"smooth\" });\r\n    } else if (e.deltaY < 0) {\r\n      section_1.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  } else if (section == \"upgrades\") {\r\n    if (e.deltaY < 0) {\r\n      section_1.scrollIntoView({ behavior: \"smooth\" });\r\n    } else if (e.deltaY > 0) {\r\n      section_3.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  } else if (section == \"status\") {\r\n    if (e.deltaY < 0) {\r\n      section_2.scrollIntoView({ behavior: \"smooth\" });\r\n    } else if (e.deltaY > 0) {\r\n      section_3.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }\r\n};\r\n","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\upgrade section\\index.js",["45","46","47"],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\stats section\\index.js",["48","49","50"],"import React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { data } from \"../other/data\";\r\nimport { formatNumbers } from \"../other/formatnumbers\";\r\nimport { smoothScroll } from \"../other/smoothscroll\";\r\nimport \"./stats.css\";\r\n\r\nconst StatsSection = ({ time }) => {\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"stats-section\"\r\n        id=\"status\"\r\n        onWheel={(e) => smoothScroll(\"status\", e)}\r\n      >\r\n        <div className=\"stats-container\">\r\n          <div>\r\n            <ManualUpgradeStats\r\n              level={data.manual_level}\r\n              mvalue={data.manual_value}\r\n            />\r\n            <OtherUpgradeStats\r\n              title=\"Builder\"\r\n              level={data.builder_level}\r\n              ovalue={data.builder_value}\r\n            />\r\n            <OtherUpgradeStats\r\n              title=\"Foundry\"\r\n              level={data.foundry_level}\r\n              ovalue={data.foundry_value}\r\n            />\r\n            <OtherUpgradeStats\r\n              title=\"Swarm\"\r\n              level={data.swarm_level}\r\n              ovalue={data.swarm_value}\r\n            />\r\n          </div>\r\n          <div>\r\n            <TotalClicks clicks={data.total_clicks} />\r\n            <NanoPerSec nanos={data.nanobots_per_second} />\r\n          </div>\r\n          <div>\r\n            <TimePlayed clock={time} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ManualUpgradeStats = ({ level, mvalue }) => {\r\n  return (\r\n    <div className=\"upgrade-stats\">\r\n      <h1>Manual</h1>\r\n      <p>\r\n        Level: <span>{level}</span>\r\n      </p>\r\n      <p>\r\n        Value: <span>{formatNumbers(mvalue)}</span>\r\n        <sub>/click</sub>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst OtherUpgradeStats = ({ title, level, ovalue }) => {\r\n  return (\r\n    <div className=\"upgrade-stats\">\r\n      <h1>{title}</h1>\r\n      <p>\r\n        Level: <span>{level}</span>\r\n      </p>\r\n      <p>\r\n        Value: <span>{formatNumbers(ovalue)}</span>\r\n        <sub>/sec</sub>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TotalClicks = ({ clicks }) => {\r\n  return (\r\n    <div className=\"total-clicks-stat\">\r\n      <h1>Clicks: </h1>\r\n      <p>{formatNumbers(clicks)}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst NanoPerSec = ({ nanos }) => {\r\n  return (\r\n    <div className=\"nanopersec-stat\">\r\n      <h1>Automated Nanobots Per Second: </h1>\r\n      <p>{formatNumbers(nanos)}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TimePlayed = ({ clock }) => {\r\n  return (\r\n    <div className=\"time-stat\">\r\n      <h1>Total Time Played </h1>\r\n      <p>{clock}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StatsSection;\r\n","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\formatnumbers.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":2,"column":8,"nodeType":"57","messageId":"58","endLine":2,"endColumn":16},{"ruleId":"59","severity":1,"message":"60","line":34,"column":11,"nodeType":"61","endLine":34,"endColumn":51},{"ruleId":"62","severity":1,"message":"63","line":5,"column":15,"nodeType":"64","messageId":"65","endLine":5,"endColumn":17},{"ruleId":"62","severity":1,"message":"63","line":11,"column":22,"nodeType":"64","messageId":"65","endLine":11,"endColumn":24},{"ruleId":"62","severity":1,"message":"63","line":17,"column":22,"nodeType":"64","messageId":"65","endLine":17,"endColumn":24},{"ruleId":"55","severity":1,"message":"56","line":2,"column":8,"nodeType":"57","messageId":"58","endLine":2,"endColumn":16},{"ruleId":"66","severity":1,"message":"67","line":17,"column":6,"nodeType":"68","endLine":17,"endColumn":8,"suggestions":"69"},{"ruleId":"59","severity":1,"message":"60","line":101,"column":9,"nodeType":"61","endLine":101,"endColumn":51},{"ruleId":"55","severity":1,"message":"70","line":1,"column":17,"nodeType":"57","messageId":"58","endLine":1,"endColumn":25},{"ruleId":"55","severity":1,"message":"71","line":1,"column":27,"nodeType":"57","messageId":"58","endLine":1,"endColumn":36},{"ruleId":"55","severity":1,"message":"56","line":2,"column":8,"nodeType":"57","messageId":"58","endLine":2,"endColumn":16},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateAmount'. Either include it or remove the dependency array.","ArrayExpression",["74"],"'useState' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},"Update the dependencies array to be: [updateAmount]",{"range":"77","text":"78"},[682,684],"[updateAmount]"]