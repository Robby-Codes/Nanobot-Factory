[{"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\index.js":"1","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\App.js":"2","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\home section\\index.js":"3","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\data.js":"4","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\smoothscroll.js":"5","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\upgrade section\\index.js":"6","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\stats section\\index.js":"7","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\formatnumbers.js":"8"},{"size":230,"mtime":1611549982384,"results":"9","hashOfConfig":"10"},{"size":115,"mtime":1611470197600,"results":"11","hashOfConfig":"10"},{"size":2028,"mtime":1612066448502,"results":"12","hashOfConfig":"10"},{"size":766,"mtime":1611900338787,"results":"13","hashOfConfig":"10"},{"size":868,"mtime":1611470012254,"results":"14","hashOfConfig":"10"},{"size":5809,"mtime":1611799930729,"results":"15","hashOfConfig":"10"},{"size":2624,"mtime":1611711984124,"results":"16","hashOfConfig":"10"},{"size":115,"mtime":1611711726223,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"w98xgd",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\index.js",[],["38","39"],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\App.js",[],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\home section\\index.js",["40","41","42","43"],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\data.js",[],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\smoothscroll.js",["44","45","46"],"export const smoothScroll = (section, e) => {\r\n  const section_1 = document.getElementById(\"clicker\");\r\n  const section_2 = document.getElementById(\"upgrades\");\r\n  const section_3 = document.getElementById(\"status\");\r\n  if (section == \"clicker\") {\r\n    if (e.deltaY > 0) {\r\n      section_2.scrollIntoView({ behavior: \"smooth\" });\r\n    } else if (e.deltaY < 0) {\r\n      section_1.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  } else if (section == \"upgrades\") {\r\n    if (e.deltaY < 0) {\r\n      section_1.scrollIntoView({ behavior: \"smooth\" });\r\n    } else if (e.deltaY > 0) {\r\n      section_3.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  } else if (section == \"status\") {\r\n    if (e.deltaY < 0) {\r\n      section_2.scrollIntoView({ behavior: \"smooth\" });\r\n    } else if (e.deltaY > 0) {\r\n      section_3.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }\r\n};\r\n","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\upgrade section\\index.js",["47","48","49"],"import React, { useEffect, useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { data } from \"../other/data\";\r\nimport { formatNumbers } from \"../other/formatnumbers\";\r\nimport { smoothScroll } from \"../other/smoothscroll\";\r\nimport \"./upgrade.css\";\r\nimport super_img from \"../../assets/supernano.png\";\r\nimport click_img from \"../../assets/click.png\";\r\nimport factory_img from \"../../assets/factory.png\";\r\nimport swarm_img from \"../../assets/swarm.png\";\r\nimport StatsSection from \"../stats section\";\r\n\r\nconst UpgradeSection = ({ updateAmount }) => {\r\n  const [time, setTime] = useState(\"00:00:00\");\r\n  useEffect(() => {\r\n    amountCounter(updateAmount, setTime);\r\n  }, []);\r\n  return (\r\n    <Upgrade\r\n      updateAmount={updateAmount}\r\n      time={time}\r\n      updateTime={() => setTime}\r\n    />\r\n  );\r\n};\r\n\r\nconst Upgrade = ({ updateAmount, time, updateTime }) => {\r\n  const [mprice, setMPrice] = useState(data.manual_price);\r\n  const [bprice, setBPrice] = useState(data.builder_price);\r\n  const [fprice, setFPrice] = useState(data.foundry_price);\r\n  const [sprice, setSPrice] = useState(data.swarm_price);\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"upgrade-container\"\r\n        id=\"upgrades\"\r\n        onWheel={(e) => {\r\n          smoothScroll(\"upgrades\", e);\r\n        }}\r\n      >\r\n        <div className=\"upgrades\">\r\n          <DifferentUpgrades\r\n            img={click_img}\r\n            title=\"Manual\"\r\n            description=\"Sacrifice nanobots for research! Figure out how to manually build more\r\n          at a time.\"\r\n            price={mprice}\r\n            updatePrice={() => setMPrice(data.manual_price)}\r\n            updateAmount={updateAmount}\r\n            updateTime={updateTime}\r\n          />\r\n          <DifferentUpgrades\r\n            img={super_img}\r\n            title=\"Builder\"\r\n            description=\"Combine nanobots to create a super nanobot capable of creating other\r\n          nanobots using materials around it!\"\r\n            price={bprice}\r\n            updatePrice={() => setBPrice(data.builder_price)}\r\n            updateAmount={updateAmount}\r\n            updateTime={updateTime}\r\n          />\r\n          <DifferentUpgrades\r\n            img={factory_img}\r\n            title=\"Foundry\"\r\n            description=\"Morph nanobots together to create a microscopic nanobot factory!\r\n          Nanobots bring it materials to create many replicas.\"\r\n            price={fprice}\r\n            updatePrice={() => setFPrice(data.foundry_price)}\r\n            updateAmount={updateAmount}\r\n            updateTime={updateTime}\r\n          />\r\n          <DifferentUpgrades\r\n            img={swarm_img}\r\n            title=\"Swarm\"\r\n            description=\"Fuse nanobots together into a swarm of flying super nanobots capable\r\n          of finding materials and replicating!\"\r\n            price={sprice}\r\n            updatePrice={() => setSPrice(data.swarm_price)}\r\n            updateAmount={updateAmount}\r\n            updateTime={updateTime}\r\n          />\r\n        </div>\r\n      </div>\r\n      <StatsSection time={time} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst DifferentUpgrades = ({\r\n  img,\r\n  title,\r\n  description,\r\n  price,\r\n  updatePrice,\r\n  updateAmount,\r\n  updateTime,\r\n}) => {\r\n  return (\r\n    <div className=\"stack\">\r\n      <div className=\"u-icon-container\">\r\n        <img className=\"upgrade-icon\" src={img} />\r\n      </div>\r\n      <div className=\"dec-line\"></div>\r\n      <h1>{title}</h1>\r\n      <p>{description}</p>\r\n      <button\r\n        onClick={() =>\r\n          handleClick(title, price, updatePrice, updateAmount, updateTime)\r\n        }\r\n      >\r\n        <p>{formatNumbers(price)}</p>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst handleClick = (title, price, updatePrice, updateAmount, updateTime) => {\r\n  if (data.current_amount >= price) {\r\n    if (title === \"Manual\") {\r\n      data.manual_value *= 2;\r\n      data.manual_price *= 5;\r\n      data.manual_level += 1;\r\n    } else if (title === \"Builder\") {\r\n      data.builder_value += 2;\r\n      data.builder_price *= 2;\r\n      data.builder_level += 1;\r\n      data.nanobots_per_second =\r\n        data.builder_value + data.foundry_value + data.swarm_value;\r\n    } else if (title === \"Foundry\") {\r\n      data.foundry_value += 5;\r\n      data.foundry_price *= 3;\r\n      data.foundry_level += 1;\r\n      data.nanobots_per_second =\r\n        data.builder_value + data.foundry_value + data.swarm_value;\r\n    } else if (title === \"Swarm\") {\r\n      data.swarm_value += 10;\r\n      data.swarm_price *= 4;\r\n      data.swarm_level += 1;\r\n      data.nanobots_per_second =\r\n        data.builder_value + data.foundry_value + data.swarm_value;\r\n    }\r\n    data.current_amount -= price;\r\n    updatePrice();\r\n    amountCounter(updateAmount, updateTime);\r\n  }\r\n};\r\n\r\nconst formatTime = () => {\r\n  data.seconds += 0.1;\r\n  if (data.seconds >= 60) {\r\n    data.seconds = 0;\r\n    data.minutes += 1;\r\n  }\r\n  if (data.minutes >= 60) {\r\n    data.minutes = 0;\r\n    data.hours += 1;\r\n  }\r\n  let formattedSeconds = Math.floor(data.seconds).toLocaleString(\"en-US\", {\r\n    minimumIntegerDigits: 2,\r\n    useGrouping: true,\r\n  });\r\n  let formattedMinutes = Math.floor(data.minutes).toLocaleString(\"en-US\", {\r\n    minimumIntegerDigits: 2,\r\n    useGrouping: true,\r\n  });\r\n  let formattedHours = Math.floor(data.hours).toLocaleString(\"en-US\", {\r\n    minimumIntegerDigits: 2,\r\n    useGrouping: true,\r\n  });\r\n  return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\r\n};\r\n\r\nconst amountCounter = (updateAmount, updateTime) => {\r\n  const builder = data.builder_value;\r\n  const factory = data.foundry_value;\r\n  const swarm = data.swarm_value;\r\n  const fraction = (builder + factory + swarm) / 10;\r\n  setInterval(() => {\r\n    data.current_amount += fraction;\r\n    updateAmount();\r\n    updateTime(formatTime);\r\n  }, 100);\r\n};\r\n\r\nexport default UpgradeSection;\r\n","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\stats section\\index.js",["50","51","52"],"import React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { data } from \"../other/data\";\r\nimport { formatNumbers } from \"../other/formatnumbers\";\r\nimport { smoothScroll } from \"../other/smoothscroll\";\r\nimport \"./stats.css\";\r\n\r\nconst StatsSection = ({ time }) => {\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"stats-section\"\r\n        id=\"status\"\r\n        onWheel={(e) => smoothScroll(\"status\", e)}\r\n      >\r\n        <div className=\"stats-container\">\r\n          <div>\r\n            <ManualUpgradeStats\r\n              level={data.manual_level}\r\n              mvalue={data.manual_value}\r\n            />\r\n            <OtherUpgradeStats\r\n              title=\"Builder\"\r\n              level={data.builder_level}\r\n              ovalue={data.builder_value}\r\n            />\r\n            <OtherUpgradeStats\r\n              title=\"Foundry\"\r\n              level={data.foundry_level}\r\n              ovalue={data.foundry_value}\r\n            />\r\n            <OtherUpgradeStats\r\n              title=\"Swarm\"\r\n              level={data.swarm_level}\r\n              ovalue={data.swarm_value}\r\n            />\r\n          </div>\r\n          <div>\r\n            <TotalClicks clicks={data.total_clicks} />\r\n            <NanoPerSec nanos={data.nanobots_per_second} />\r\n          </div>\r\n          <div>\r\n            <TimePlayed clock={time} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ManualUpgradeStats = ({ level, mvalue }) => {\r\n  return (\r\n    <div className=\"upgrade-stats\">\r\n      <h1>Manual</h1>\r\n      <p>\r\n        Level: <span>{level}</span>\r\n      </p>\r\n      <p>\r\n        Value: <span>{formatNumbers(mvalue)}</span>\r\n        <sub>/click</sub>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst OtherUpgradeStats = ({ title, level, ovalue }) => {\r\n  return (\r\n    <div className=\"upgrade-stats\">\r\n      <h1>{title}</h1>\r\n      <p>\r\n        Level: <span>{level}</span>\r\n      </p>\r\n      <p>\r\n        Value: <span>{formatNumbers(ovalue)}</span>\r\n        <sub>/sec</sub>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TotalClicks = ({ clicks }) => {\r\n  return (\r\n    <div className=\"total-clicks-stat\">\r\n      <h1>Clicks: </h1>\r\n      <p>{formatNumbers(clicks)}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst NanoPerSec = ({ nanos }) => {\r\n  return (\r\n    <div className=\"nanopersec-stat\">\r\n      <h1>Automated Nanobots Per Second: </h1>\r\n      <p>{formatNumbers(nanos)}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TimePlayed = ({ clock }) => {\r\n  return (\r\n    <div className=\"time-stat\">\r\n      <h1>Total Time Played </h1>\r\n      <p>{clock}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StatsSection;\r\n","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\formatnumbers.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":1,"column":17,"nodeType":"59","messageId":"60","endLine":1,"endColumn":26},{"ruleId":"57","severity":1,"message":"61","line":2,"column":8,"nodeType":"59","messageId":"60","endLine":2,"endColumn":16},{"ruleId":"62","severity":1,"message":"63","line":48,"column":11,"nodeType":"64","endLine":48,"endColumn":51},{"ruleId":"57","severity":1,"message":"65","line":69,"column":19,"nodeType":"59","messageId":"60","endLine":69,"endColumn":29},{"ruleId":"66","severity":1,"message":"67","line":5,"column":15,"nodeType":"68","messageId":"69","endLine":5,"endColumn":17},{"ruleId":"66","severity":1,"message":"67","line":11,"column":22,"nodeType":"68","messageId":"69","endLine":11,"endColumn":24},{"ruleId":"66","severity":1,"message":"67","line":17,"column":22,"nodeType":"68","messageId":"69","endLine":17,"endColumn":24},{"ruleId":"57","severity":1,"message":"61","line":2,"column":8,"nodeType":"59","messageId":"60","endLine":2,"endColumn":16},{"ruleId":"70","severity":1,"message":"71","line":17,"column":6,"nodeType":"72","endLine":17,"endColumn":8,"suggestions":"73"},{"ruleId":"62","severity":1,"message":"63","line":101,"column":9,"nodeType":"64","endLine":101,"endColumn":51},{"ruleId":"57","severity":1,"message":"74","line":1,"column":17,"nodeType":"59","messageId":"60","endLine":1,"endColumn":25},{"ruleId":"57","severity":1,"message":"58","line":1,"column":27,"nodeType":"59","messageId":"60","endLine":1,"endColumn":36},{"ruleId":"57","severity":1,"message":"61","line":2,"column":8,"nodeType":"59","messageId":"60","endLine":2,"endColumn":16},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setStyling' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateAmount'. Either include it or remove the dependency array.","ArrayExpression",["77"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},"Update the dependencies array to be: [updateAmount]",{"range":"80","text":"81"},[682,684],"[updateAmount]"]