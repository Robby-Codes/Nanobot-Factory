[{"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\index.js":"1","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\App.js":"2","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\home section\\index.js":"3","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\data.js":"4","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\smoothscroll.js":"5","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\upgrade section\\index.js":"6","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\stats section\\index.js":"7","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\formatnumbers.js":"8","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\home section\\cover.js":"9","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\images.js":"10"},{"size":230,"mtime":1611549982384,"results":"11","hashOfConfig":"12"},{"size":115,"mtime":1612413229340,"results":"13","hashOfConfig":"12"},{"size":6222,"mtime":1614228201487,"results":"14","hashOfConfig":"12"},{"size":873,"mtime":1612413097429,"results":"15","hashOfConfig":"12"},{"size":1116,"mtime":1614228048849,"results":"16","hashOfConfig":"12"},{"size":6246,"mtime":1614226741293,"results":"17","hashOfConfig":"12"},{"size":3004,"mtime":1614226734566,"results":"18","hashOfConfig":"12"},{"size":150,"mtime":1612413000236,"results":"19","hashOfConfig":"12"},{"size":5497,"mtime":1613879252377,"results":"20","hashOfConfig":"12"},{"size":458,"mtime":1613879419113,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"w98xgd",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\index.js",[],["44","45"],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\App.js",[],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\home section\\index.js",[],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\data.js",[],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\smoothscroll.js",[],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\upgrade section\\index.js",["46"],"import React, { useEffect, useState } from \"react\";\r\nimport { data } from \"../other/data\";\r\nimport { formatNumbers } from \"../other/formatnumbers\";\r\nimport { smoothScroll } from \"../other/smoothscroll\";\r\nimport { images } from \"../other/images\";\r\nimport \"./upgrade.css\";\r\nimport StatsSection from \"../stats section\";\r\n\r\n// Upgrade Section Component.\r\nconst UpgradeSection = ({ updateAmount }) => {\r\n  const [time, setTime] = useState(\"00:00:00\");\r\n  // Calls amountCounter, which should continue running forever\r\n  useEffect(() => {\r\n    amountCounter(updateAmount, setTime);\r\n  }, []);\r\n  return (\r\n    <Upgrade\r\n      updateAmount={updateAmount}\r\n      time={time}\r\n      updateTime={() => setTime}\r\n    />\r\n  );\r\n};\r\n\r\n// The different upgrades\r\nconst Upgrade = ({ updateAmount, time, updateTime }) => {\r\n  const [mprice, setMPrice] = useState(data.manual_price);\r\n  const [bprice, setBPrice] = useState(data.builder_price);\r\n  const [fprice, setFPrice] = useState(data.foundry_price);\r\n  const [sprice, setSPrice] = useState(data.swarm_price);\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"upgrade-container\"\r\n        id=\"upgrades\"\r\n        onWheel={(e) => {\r\n          smoothScroll(\"upgrades\", e);\r\n        }}\r\n      >\r\n        <div className=\"upgrades\">\r\n          <DifferentUpgrades\r\n            img={images.click_img}\r\n            img_alt=\"Manual Upgrade\"\r\n            title=\"Manual\"\r\n            description=\"Sacrifice nanobots for research! Figure out how to manually build more\r\n          at a time.\"\r\n            price={mprice}\r\n            updatePrice={() => setMPrice(data.manual_price)}\r\n            updateAmount={updateAmount}\r\n            updateTime={updateTime}\r\n          />\r\n          <DifferentUpgrades\r\n            img={images.super_img}\r\n            img_alt=\"Super Nanobot Upgrade\"\r\n            title=\"Builder\"\r\n            description=\"Combine nanobots to create a super nanobot capable of creating other\r\n          nanobots using materials around it!\"\r\n            price={bprice}\r\n            updatePrice={() => setBPrice(data.builder_price)}\r\n            updateAmount={updateAmount}\r\n            updateTime={updateTime}\r\n          />\r\n          <DifferentUpgrades\r\n            img={images.factory_img}\r\n            img_alt=\"Nanobot Foundry Upgrade\"\r\n            title=\"Foundry\"\r\n            description=\"Morph nanobots together to create a microscopic nanobot factory!\r\n          Nanobots bring it materials to create many replicas.\"\r\n            price={fprice}\r\n            updatePrice={() => setFPrice(data.foundry_price)}\r\n            updateAmount={updateAmount}\r\n            updateTime={updateTime}\r\n          />\r\n          <DifferentUpgrades\r\n            img={images.swarm_img}\r\n            img_alt=\"Nanobot Swarm Upgrade\"\r\n            title=\"Swarm\"\r\n            description=\"Fuse nanobots together into a swarm of flying super nanobots capable\r\n          of finding materials and replicating!\"\r\n            price={sprice}\r\n            updatePrice={() => setSPrice(data.swarm_price)}\r\n            updateAmount={updateAmount}\r\n            updateTime={updateTime}\r\n          />\r\n        </div>\r\n      </div>\r\n      <StatsSection time={time} />\r\n    </>\r\n  );\r\n};\r\n\r\n// Used to create the different upgrades in Upgrade component\r\nconst DifferentUpgrades = ({\r\n  img,\r\n  img_alt,\r\n  title,\r\n  description,\r\n  price,\r\n  updatePrice,\r\n  updateAmount,\r\n  updateTime,\r\n}) => {\r\n  return (\r\n    <div className=\"stack\">\r\n      <div className=\"u-icon-container\">\r\n        <img className=\"upgrade-icon\" src={img} alt={img_alt} />\r\n      </div>\r\n      <div className=\"dec-line\"></div>\r\n      <h1>{title}</h1>\r\n      <p>{description}</p>\r\n      <button\r\n        onClick={() =>\r\n          handleClick(title, price, updatePrice, updateAmount, updateTime)\r\n        }\r\n      >\r\n        <p>{formatNumbers(price)}</p>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Checks for current amount and price to decide whether to upgrade or not\r\nconst handleClick = (title, price, updatePrice, updateAmount, updateTime) => {\r\n  if (data.current_amount >= price) {\r\n    if (title === \"Manual\") {\r\n      data.manual_value *= 2;\r\n      data.manual_price *= 5;\r\n      data.manual_level += 1;\r\n    } else if (title === \"Builder\") {\r\n      data.builder_value += 10;\r\n      data.builder_price *= 2;\r\n      data.builder_level += 1;\r\n      data.nanobots_per_second =\r\n        data.builder_value + data.foundry_value + data.swarm_value;\r\n    } else if (title === \"Foundry\") {\r\n      data.foundry_value += 50;\r\n      data.foundry_price *= 3;\r\n      data.foundry_level += 1;\r\n      data.nanobots_per_second =\r\n        data.builder_value + data.foundry_value + data.swarm_value;\r\n    } else if (title === \"Swarm\") {\r\n      data.swarm_value += 100;\r\n      data.swarm_price *= 4;\r\n      data.swarm_level += 1;\r\n      data.nanobots_per_second =\r\n        data.builder_value + data.foundry_value + data.swarm_value;\r\n    }\r\n    data.current_amount -= price;\r\n    updatePrice();\r\n    amountCounter(updateAmount, updateTime);\r\n  }\r\n};\r\n\r\n// Formats the time in HH:MM:SS\r\nconst formatTime = () => {\r\n  data.seconds += 0.1;\r\n  if (data.seconds >= 60) {\r\n    data.seconds = 0;\r\n    data.minutes += 1;\r\n  }\r\n  if (data.minutes >= 60) {\r\n    data.minutes = 0;\r\n    data.hours += 1;\r\n  }\r\n  let formattedSeconds = Math.floor(data.seconds).toLocaleString(\"en-US\", {\r\n    minimumIntegerDigits: 2,\r\n    useGrouping: true,\r\n  });\r\n  let formattedMinutes = Math.floor(data.minutes).toLocaleString(\"en-US\", {\r\n    minimumIntegerDigits: 2,\r\n    useGrouping: true,\r\n  });\r\n  let formattedHours = Math.floor(data.hours).toLocaleString(\"en-US\", {\r\n    minimumIntegerDigits: 2,\r\n    useGrouping: true,\r\n  });\r\n  return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\r\n};\r\n\r\n// Runs indefinitely. Updates the displayed amount on the Home Section and the time in the Stats Section\r\nconst amountCounter = (updateAmount, updateTime) => {\r\n  const builder = data.builder_value;\r\n  const factory = data.foundry_value;\r\n  const swarm = data.swarm_value;\r\n  const fraction = (builder + factory + swarm) / 10;\r\n  setInterval(() => {\r\n    data.current_amount += fraction;\r\n    updateAmount();\r\n    updateTime(formatTime);\r\n  }, 100);\r\n};\r\n\r\nexport default UpgradeSection;\r\n","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\stats section\\index.js",[],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\formatnumbers.js",[],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\home section\\cover.js",[],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\images.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":15,"column":6,"nodeType":"53","endLine":15,"endColumn":8,"suggestions":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateAmount'. Either include it or remove the dependency array.","ArrayExpression",["57"],"no-global-assign","no-unsafe-negation",{"desc":"58","fix":"59"},"Update the dependencies array to be: [updateAmount]",{"range":"60","text":"61"},[582,584],"[updateAmount]"]