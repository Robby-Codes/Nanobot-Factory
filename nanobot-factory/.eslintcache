[{"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\index.js":"1","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\App.js":"2","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\home section\\index.js":"3","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\data.js":"4","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\smoothscroll.js":"5","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\upgrade section\\index.js":"6","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\stats section\\index.js":"7"},{"size":290,"mtime":1611549916598,"results":"8","hashOfConfig":"9"},{"size":115,"mtime":1611470197600,"results":"10","hashOfConfig":"9"},{"size":1278,"mtime":1611470162968,"results":"11","hashOfConfig":"9"},{"size":505,"mtime":1611470012252,"results":"12","hashOfConfig":"9"},{"size":868,"mtime":1611470012254,"results":"13","hashOfConfig":"9"},{"size":3954,"mtime":1611470177755,"results":"14","hashOfConfig":"9"},{"size":1706,"mtime":1611548642814,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"w98xgd",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\index.js",[],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\App.js",[],["34","35"],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\home section\\index.js",["36","37"],"import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { data } from \"../other/data\";\r\nimport { smoothScroll } from \"../other/smoothscroll\";\r\nimport \"./clicker.css\";\r\nimport img from \"../../assets/click-icon-1.png\";\r\nimport UpgradeSection from \"../upgrade section\";\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <>\r\n      <Clicker />\r\n    </>\r\n  );\r\n};\r\n\r\nconst Clicker = () => {\r\n  const [Amount, setAmount] = useState(0);\r\n  const handleClick = () => {\r\n    data.total_clicks += 1;\r\n    data.current_amount = Amount + data.manual_value;\r\n    setAmount(data.current_amount);\r\n  };\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"clicker-container\"\r\n        id=\"clicker\"\r\n        onWheel={(e) => smoothScroll(\"clicker\", e)}\r\n      >\r\n        <Count amount={Amount} />\r\n        <button onClick={() => handleClick()}>\r\n          <img className=\"click-icon\" src={img} />\r\n        </button>\r\n      </div>\r\n      <UpgradeSection updateAmount={() => setAmount(data.current_amount)} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst Count = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"amount-container\">\r\n        <h1>\r\n          {Math.floor(props.amount)}\r\n          <br /> Nanobots\r\n        </h1>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\data.js",[],"C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\other\\smoothscroll.js",["38","39","40"],"export const smoothScroll = (section, e) => {\r\n  const section_1 = document.getElementById(\"clicker\");\r\n  const section_2 = document.getElementById(\"upgrades\");\r\n  const section_3 = document.getElementById(\"status\");\r\n  if (section == \"clicker\") {\r\n    if (e.deltaY > 0) {\r\n      section_2.scrollIntoView({ behavior: \"smooth\" });\r\n    } else if (e.deltaY < 0) {\r\n      section_1.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  } else if (section == \"upgrades\") {\r\n    if (e.deltaY < 0) {\r\n      section_1.scrollIntoView({ behavior: \"smooth\" });\r\n    } else if (e.deltaY > 0) {\r\n      section_3.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  } else if (section == \"status\") {\r\n    if (e.deltaY < 0) {\r\n      section_2.scrollIntoView({ behavior: \"smooth\" });\r\n    } else if (e.deltaY > 0) {\r\n      section_3.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }\r\n};\r\n","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\upgrade section\\index.js",["41","42"],"import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { data } from \"../other/data\";\r\nimport { smoothScroll } from \"../other/smoothscroll\";\r\nimport \"./upgrade.css\";\r\nimport super_img from \"../../assets/supernano.png\";\r\nimport click_img from \"../../assets/click.png\";\r\nimport factory_img from \"../../assets/factory.png\";\r\nimport swarm_img from \"../../assets/swarm.png\";\r\nimport StatsSection from \"../stats section\";\r\n\r\nconst UpgradeSection = ({ updateAmount }) => {\r\n  return <Upgrade updateAmount={updateAmount} />;\r\n};\r\n\r\nconst Upgrade = ({ updateAmount }) => {\r\n  const [mprice, setMPrice] = useState(data.manual_price);\r\n  const [bprice, setBPrice] = useState(data.builder_price);\r\n  const [fprice, setFPrice] = useState(data.foundry_price);\r\n  const [sprice, setSPrice] = useState(data.swarm_price);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"upgrade-container\"\r\n        id=\"upgrades\"\r\n        onWheel={(e) => {\r\n          smoothScroll(\"upgrades\", e);\r\n        }}\r\n      >\r\n        <DifferentUpgrades\r\n          img={click_img}\r\n          title=\"Manual\"\r\n          description=\"Sacrifice nanobots for research! Figure out how to manually build more\r\n          at a time.\"\r\n          price={mprice}\r\n          updatePrice={() => setMPrice(data.manual_price)}\r\n          updateAmount={updateAmount}\r\n        />\r\n        <DifferentUpgrades\r\n          img={super_img}\r\n          title=\"Builder\"\r\n          description=\"Combine nanobots to create a super nanobot capable of creating other\r\n          nanobots using materials around it!\"\r\n          price={bprice}\r\n          updatePrice={() => setBPrice(data.builder_price)}\r\n          updateAmount={updateAmount}\r\n        />\r\n        <DifferentUpgrades\r\n          img={factory_img}\r\n          title=\"Foundry\"\r\n          description=\"Morph nanobots together to create a microscopic nanobot factory!\r\n          Nanobots bring it materials to create many replicas.\"\r\n          price={fprice}\r\n          updatePrice={() => setFPrice(data.foundry_price)}\r\n          updateAmount={updateAmount}\r\n        />\r\n        <DifferentUpgrades\r\n          img={swarm_img}\r\n          title=\"Swarm\"\r\n          description=\"Fuse nanobots together into a swarm of flying super nanobots capable\r\n          of finding materials and replicating!\"\r\n          price={sprice}\r\n          updatePrice={() => setSPrice(data.swarm_price)}\r\n          updateAmount={updateAmount}\r\n        />\r\n      </div>\r\n      <StatsSection />\r\n    </>\r\n  );\r\n};\r\n\r\nconst DifferentUpgrades = ({\r\n  img,\r\n  title,\r\n  description,\r\n  price,\r\n  updatePrice,\r\n  updateAmount,\r\n}) => {\r\n  const handleClick = () => {\r\n    if (data.current_amount >= price) {\r\n      if (title === \"Manual\") {\r\n        data.manual_value += 1;\r\n        data.manual_price *= 2;\r\n      } else if (title === \"Builder\") {\r\n        data.builder_value += 1;\r\n        data.builder_price *= 3;\r\n      } else if (title === \"Foundry\") {\r\n        data.foundry_value += 5;\r\n        data.foundry_price *= 5;\r\n      } else if (title === \"Swarm\") {\r\n        data.swarm_value += 10;\r\n        data.swarm_price *= 10;\r\n      }\r\n      data.current_amount -= price;\r\n      updatePrice();\r\n      updateAmount();\r\n      AmountCounter(updateAmount);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"stack\">\r\n      <div className=\"u-icon-container\">\r\n        <img className=\"upgrade-icon\" src={img} />\r\n      </div>\r\n      <div className=\"dec-line\"></div>\r\n      <h1>{title}</h1>\r\n      <p>{description}</p>\r\n      <button onClick={() => handleClick()}>\r\n        <p>{price}</p>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AmountCounter = (updateAmount) => {\r\n  const builder = data.builder_value;\r\n  const factory = data.foundry_value;\r\n  const swarm = data.swarm_value;\r\n  const fraction = (builder + factory + swarm) / 10;\r\n  setInterval(() => {\r\n    data.current_amount += fraction;\r\n    updateAmount();\r\n  }, 100);\r\n};\r\n\r\nexport default UpgradeSection;\r\n","C:\\Users\\rober\\Desktop\\Development\\Nanobot-Factory\\nanobot-factory\\src\\main\\stats section\\index.js",["43","44","45","46"],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":2,"column":8,"nodeType":"53","messageId":"54","endLine":2,"endColumn":16},{"ruleId":"55","severity":1,"message":"56","line":33,"column":11,"nodeType":"57","endLine":33,"endColumn":51},{"ruleId":"58","severity":1,"message":"59","line":5,"column":15,"nodeType":"60","messageId":"61","endLine":5,"endColumn":17},{"ruleId":"58","severity":1,"message":"59","line":11,"column":22,"nodeType":"60","messageId":"61","endLine":11,"endColumn":24},{"ruleId":"58","severity":1,"message":"59","line":17,"column":22,"nodeType":"60","messageId":"61","endLine":17,"endColumn":24},{"ruleId":"51","severity":1,"message":"52","line":2,"column":8,"nodeType":"53","messageId":"54","endLine":2,"endColumn":16},{"ruleId":"55","severity":1,"message":"56","line":105,"column":9,"nodeType":"57","endLine":105,"endColumn":51},{"ruleId":"51","severity":1,"message":"62","line":1,"column":17,"nodeType":"53","messageId":"54","endLine":1,"endColumn":25},{"ruleId":"51","severity":1,"message":"63","line":1,"column":27,"nodeType":"53","messageId":"54","endLine":1,"endColumn":36},{"ruleId":"51","severity":1,"message":"52","line":2,"column":8,"nodeType":"53","messageId":"54","endLine":2,"endColumn":16},{"ruleId":"51","severity":1,"message":"64","line":3,"column":10,"nodeType":"53","messageId":"54","endLine":3,"endColumn":14},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'useEffect' is defined but never used.","'data' is defined but never used.","no-global-assign","no-unsafe-negation"]